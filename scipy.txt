import scipy
import numpy as np
import pandas as pd

1.from scipy.constants import pi
#from math import pi
print("SciPy Function: ",scipy.constants.pi)

2.from scipy import constants
print(dir(constants))

3.from scipy.fftpack import fft
a=np.array([1,2])
b=fft(a)
print(b)

4.from scipy.fftpack import dct
print(dct(np.array([1,2,3,4,5])))

5.from scipy import interpolate
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt

6.x=np.linspace(0,4,12)
y=np.cos(x**2/3+4)
print(x)
print(y)
f1=interp1d(x,y,kind='linear')
f2=interp1d(x,y,kind='cubic')
xnew=np.linspace(0,4,30)
plt.plot(x,y,'o',xnew,f1(xnew),'-',xnew,f2(xnew))
plt.legend(['data','linear','cubic','nearest'],loc='best')
plt.show()

 7.import numpy as np
 import warnings
 warnings.filterwarnings("ignore")
 from imageio import imwrite  # Use imageio for saving images
 import matplotlib.pyplot as plt
 from scipy import misc

8.# Get the face image
 f = misc.face()

9.# Save the image
imwrite('face.png', f)

10.# Display the image using matplotlib
 plt.imshow(f)
 plt.axis('off')  # Turn off axis for better visualization
 plt.show()

11. # Load the face image
 face = misc.face()
 # Define the dimensions of the image
 height, width, _ = face.shape

12. # Crop the image
crop_face = face[-height // 4 : height // 4, width // 4 : -width // 4]
# Display the cropped face image
 plt.imshow(crop_face)
 plt.axis('off')  
 plt.show()

13.#iii. Flip Image
 from scipy import misc
 import warnings
 warnings.filterwarnings("ignore")
 face= misc.face()
 flipface= np.flipud(face)
 plt.imshow(flipface)
 plt.show()

14.#rotation
from scipy import ndimage
face = misc.face()
rface = ndimage.rotate(face,45)
plt.imshow(rface)
plt.show()

15.#blur
face= misc.face()
 bface=ndimage.gaussian_filter(face,sigma=3)
 plt.imshow(bface)
 plt.show()

16.#edge decleration
im=np.zeros((256,256))
 im[64: -64, 64:-64]=1
 im[90: -90, 90:-90]=2
 im=ndimage.gaussian_filter(im,8)
 plt.imshow(im)
 plt.show()

17.SX =ndimage.sobel(im,axis=0,mode='constant')
SY =ndimage.sobel(im,axis=1,mode='constant')
 sob =np.hypot(SX, SY)
 plt.imshow(sob)
 plt.show()
